name: CI Pipeline

# Aciona o pipeline em:
# 1. Pushes para QUALQUER branch.
# 2. Pull Requests abertos para a branch 'main'. Isso serve como uma verificação
#    final antes de mesclar o código.
on:
  push:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Clona o repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o Python e habilita o cache para o Poetry,
      #    o que acelera as execuções futuras.
      - name: Set up Python with Poetry caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'

      # 3. Instala o Poetry e as dependências do projeto definidas no
      #    seu arquivo `pyproject.toml`.
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi

      # 4. Executa os testes usando o ambiente virtual gerenciado pelo Poetry.
      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=app --cov-report=term-missing
